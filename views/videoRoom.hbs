<!DOCTYPE html>
<html>
<head>
    <title>Video Call</title>
</head>
<body>
    <h2>Video Call for Appointment {{appointmentId}}</h2>
    <div style="position:relative; width:360px; margin:auto;">
    <video id="remoteVideo" autoplay playsinline style="width:100%; border-radius:12px;"></video>
    <span style="position:absolute; bottom:8px; left:12px; background:#357ab8; color:#fff; padding:2px 8px; border-radius:6px; font-size:0.9em;">
        {{#if (eq user.role "doctor")}}Patient{{else}}Doctor{{/if}}
    </span>
    <video id="localVideo" autoplay muted playsinline style="width:120px; height:90px; position:absolute; top:12px; right:12px; border-radius:8px; border:2px solid #fff; box-shadow:0 2px 8px rgba(0,0,0,0.15);"></video>
    <span style="position:absolute; top:100px; right:18px; background:#222c3a; color:#fff; padding:1px 6px; border-radius:6px; font-size:0.8em;">
        You
    </span>
</div>
    <button id="endCallBtn" class="submit-btn" style="margin-top:16px;background:#e53935;">End Call</button>
    <script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
    <script>
        const appointmentId = "{{appointmentId}}";
        const userId = "{{user._id}}";
        const peer = new Peer(userId + '-' + appointmentId);
        let currentCall = null;
        let localStream = null;

        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {
            localStream = stream;
            document.getElementById('localVideo').srcObject = stream;

            peer.on('call', call => {
                currentCall = call;
                call.answer(stream);
                call.on('stream', remoteStream => {
                    document.getElementById('remoteVideo').srcObject = remoteStream;
                });
                call.on('close', () => {
                    document.getElementById('remoteVideo').srcObject = null;
                });
            });

            // If doctor, call patient; if patient, wait for call
            {{#if (eq user.role "doctor")}}
            setTimeout(() => {
                const patientId = "{{patientId}}"; // Pass this from backend
                const call = peer.call(patientId + '-' + appointmentId, stream);
                currentCall = call;
                call.on('stream', remoteStream => {
                    document.getElementById('remoteVideo').srcObject = remoteStream;
                });
                call.on('close', () => {
                    document.getElementById('remoteVideo').srcObject = null;
                });
            }, 2000);
            {{/if}}
        });

       document.getElementById('endCallBtn').onclick = async function() {
    // Close PeerJS call
    if (currentCall) currentCall.close();
    // Stop local media tracks
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        document.getElementById('localVideo').srcObject = null;
    }
    // Optionally, disconnect peer
    peer.disconnect();

    // If doctor, notify backend to disable videoEnabled
    {{#if (eq user.role "doctor")}}
    await fetch('/video/appointment/{{appointmentId}}/end', { method: 'POST' });
    {{/if}}

    alert('Call ended.');
 // After ending the call
{{#if (eq user.role "doctor")}}
    window.location.href = '/doctor/dashboard';
{{else}}
    window.location.href = '/profile';
{{/if}}
};
    </script>
</body>
</html>