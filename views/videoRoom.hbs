<!DOCTYPE html>
<html>
<head>
    <title>Video Call</title>
</head>
<body>
    
    <h3 class="page-title" style="text-align:center; color:#333; font-size:1.5em; margin-top:20px;">
  Appointment 
  {{#if (eq user.role "doctor")}}
    with Patient: {{patientName}}
  {{else}}
    with Doctor: Dr. {{doctorName}}
  {{/if}}

</h3>

   <div style="position:relative; width:360px; margin:auto;">
    <video id="remoteVideo" autoplay playsinline style="width:100%; border-radius:12px;"></video>
    <span style="position:absolute; bottom:8px; left:12px; background:#357ab8; color:#fff; padding:2px 8px; border-radius:6px; font-size:0.9em;">
        {{#if (eq user.role "doctor")}}{{patientName}}{{else}}Dr. {{doctorName}}{{/if}}
    </span>
    <video id="localVideo" autoplay muted playsinline style="width:120px; height:90px; position:absolute; top:12px; right:12px; border-radius:8px; border:2px solid #fff; box-shadow:0 2px 8px rgba(0,0,0,0.15);"></video>
    <span style="position:absolute; top:100px; right:18px; background:#222c3a; color:#fff; padding:1px 6px; border-radius:6px; font-size:0.8em;">
        You
    </span>
</div>

{{#if (eq user.role "doctor")}}
<button id="endCallBtn" class="submit-btn" style="margin-top:16px;background:#e53935;">End Call</button>
{{/if}}



{{!-- importing the PeerJS library --}}
<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>


<script>
const appointmentId = "{{appointmentId}}";
const userId = "{{user._id}}";
const peer = new Peer(userId + '-' + appointmentId);
let currentCall = null;
let localStream = null;

//get camera and microphone access
navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {
    localStream = stream;
    document.getElementById('localVideo').srcObject = stream;
 
 //handle incoming calls
    peer.on('call', call => {
        currentCall = call;
        call.answer(stream);

        call.on('stream', remoteStream => {
            document.getElementById('remoteVideo').srcObject = remoteStream;
        });

        call.on('close', () => {
            document.getElementById('remoteVideo').srcObject = null;
        });
    });

    // If doctor, call patient; if patient, wait for call
    {{#if (eq user.role "doctor")}}
    setTimeout(() => {
        const patientId = "{{patientId}}";
        const call = peer.call(patientId + '-' + appointmentId, stream);
        currentCall = call;
        call.on('stream', remoteStream => {
            document.getElementById('remoteVideo').srcObject = remoteStream;
        });
        call.on('close', () => {
            document.getElementById('remoteVideo').srcObject = null;
        });
    }, 2000);
    {{/if}}
});

// End call logic for doctor
{{#if (eq user.role "doctor")}}
document.getElementById('endCallBtn').onclick = async function() {
    if (currentCall) currentCall.close();
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        document.getElementById('localVideo').srcObject = null;
    }
    peer.disconnect();

    await fetch('/video/appointment/{{appointmentId}}/end', { method: 'POST' });
    alert('Call ended.');
    window.location.href = '/doctor/dashboard';
};
{{/if}}

// Patient polling for call end
{{#unless (eq user.role "doctor")}}
async function checkVideoEnabled() {
    try {
        const res = await fetch('/video/appointment/{{appointmentId}}/status');
        const data = await res.json();
        if (!data.videoEnabled) {
            if (currentCall) 
            currentCall.close();
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                document.getElementById('localVideo').srcObject = null;
            }
            peer.disconnect();
            alert('Doctor has ended the call.');
            window.location.href = '/profile';
        }
    } 
    catch(e) {}
    setTimeout(checkVideoEnabled, 2000);
}
checkVideoEnabled();
{{/unless}}

</script>


</body>
</html>